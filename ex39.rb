# create a mapping of state to abbreviation
# creates hash states
states = {
  # creates key Oregon with value OR
  'Oregon' => 'OR',
  # creates key Florida with value FL
  'Florida' => 'FL',
  # creates key California with value CA
  'California' => 'CA',
  # creates key New York with value NY
  'New York' => 'NY',
  # creates key Michigan with value MI
  'Michigan' => 'MI'
  # ends hash
}

# create a basic set of states and some cities in them
# creates hash cities
cities = {
  # creates key CA with value San Francisco
  'CA' => 'San Francisco',
  # creates key MI with value Detroit
  'MI' => 'Detroit',
  # creates key FL with value Jacksonville
  'FL' => 'Jacksonville'
  # ends hash
}

# add some more cities
# adds key NY to hash cities with value New York
cities['NY'] = 'New York'
# adds key OR to hash cities with value New York
cities['OR'] = 'Portland'

# puts out some cities
# prints the string 10 times
puts '-' * 10
# print the string, with the var accessing value for key NY
puts "NY State has: #{cities['NY']}"
# print the string, with the var accessing value for key OR
puts "OR State has: #{cities['OR']}"

# puts some states
# prints the string 10 times
puts '-' * 10
# prints the string, with the var accessing the value for key Michigan
puts "Michigan's abbreviation is: #{states['Michigan']}"
# prints the string, with the var accessing the value for key Florida
puts "Florida's abbreviation is: #{states['Florida']}"

# do it by using the state then cities dict
# prints the string 10 times
puts '-' * 10
# prints the string, with the var accessing the value in hash cities for key
  # generated by accessing the value in hash states for key Michigan
puts "Michigan has: #{cities[states['Michigan']]}"
# prints the string, with the var accessing the value in hash cities for key
  # generated by accessing the value in hash states for key Florida
puts "Florida has: #{cities[states['Florida']]}"

# puts every state abbreviation
# prints the string 10 times
puts '-' * 10
# for each key=>value pair in hash states, do
states.each do |state, abbrev|
  # print the string
  puts "#{state} is abbreviated #{abbrev}"
  # ends the loop
end

# puts every city in state
# prints the string 10 times
puts '-' * 10
# for each key=>value pair in hash cities do
cities.each do |abbrev, city|
  # print the string
  puts "#{abbrev} has the city #{city}"
  # ends the loop
end

# now do both at the same time
# prints the string 10 times
puts '-' * 10
# for each key=>value pair in hash states do
states.each do |state, abbrev|
  # sets var city to value of key abbrev in hash cities
  city = cities[abbrev]
  # prints the string
  puts "#{state} is abbreviated #{abbrev} and has city #{city}"
  # ends the loop
end

# prints the string 10 times
puts '-' * 10
# by default ruby says "nil" when something isn't in there
# sets var state to value of key Texas for hash states
state = states['Texas']

# if not in hash states
if !state
  # prints the string
  puts "Sorry, no Texas."
  # ends the loop
end

# default values using ||= with the nil result
# sets city to value of key TX for hash cities
city = cities['TX']
# if city has a value of nil, replace with string
city ||= 'Does Not Exist'
# prints the string
puts "The city for the state 'TX' is #{city}"

# when to use hashes
  # retrieve value based on non-int identifier
  # order isn't important
  # you need to add/remove elements & keys
# Exercise 39: Hashes, Oh Lovely Hashes

