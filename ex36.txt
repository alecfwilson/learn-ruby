Rules for If-Statements
* Every if-statement must have an else
* If this else should never run because it doesn't make sense, then you must use a die function in the else that prints out an error message and dies, just like we did in the last exercise. This will find *many* errors.
* Never nest if-statments more than two deep and always try to do them one deep
* Treat if-statements like paragraphs, where each if-elsif-else grouping is like a set of sentences. Put blank lines before and after.
* Your boolean tests should be simple. If they are complex, move their calculations to variables earlier in your fucntion and use a good name for the variable.

Rules for Loops
* Use a while-loop only to loop forever, and that probably means never. This only applies to Ruby, other languages are different.
* Use a for-loop for all other kinds of looping, especially if there is a fixed or limited number of things to loop over.

Tips for Debugging.
* Do not use a "debugger." A debugger is like doing a full-body scan on a sick person. You do not get any specific useful information, and you find a whole lot of information that doesn't help and is just confusing.
* The best way to debug a program is to use put to print out the values of variables at points in the program and see where they go wrong.
* Make sure parts of your program work before you try to run them. Do not write massive files of code before you try to run them. Code a little, run a little, fix a little.

Tips for Software Development
* On a sheet of paper or an index card, write a list of tasks you need to complete to finish the software. This is your to do list.
* Pick the easiest thing you can do from your list.
* Write out English comments in your source file as a guide for how you would accomplish this task in your code.
* Write some of the code under the English comments.
* Quickly run your script to see if that code worked.
* Keep working in a cycle of writing some code, running it to test it, and fixing it until it works.
* Cross this task off your list, then pick your next easiest task and repeat.

# Designing and debugging
